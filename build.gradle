plugins {
    id 'java'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.+'
}

group = modgroup
version = "${mcversion}-neo-v${modversion}"

base {
    archivesName = modid
}

java.toolchain {
    languageVersion = JavaLanguageVersion.of(21)
}

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

runs {
    configureEach {
        systemProperty  'forge.logging.console.level', 'debug'
        systemProperty  'log4j.appender.Console', "org.apache.log4j.ConsoleAppender"
        systemProperty  'terminal.jline', 'true'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', modid
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', modid
        programArgument '--nogui'
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    mavenCentral()
    maven { url "https://maven.fabricmc.net/" }
    maven { url "https://maven.tterrag.com/" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:$fgversion"

}

jar {
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "${modauthor}",
                "Specification-Version": "${modversion}",
                "Implementation-Title": "${modname}",
                "Implementation-Version": "${modversion}",
                "Implementation-Vendor" : "${modauthor}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Process target resources with mod info
tasks.processResources.outputs.upToDateWhen { false }
processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta', 'resourcepacks/**/pack.mcmeta', "$modid.$mixin_file_suffix".toString()]) {
        expand rootProject.properties
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}